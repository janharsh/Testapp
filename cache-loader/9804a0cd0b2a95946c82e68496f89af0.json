{"remainingRequest":"/Users/harsh/Documents/jHipster/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/harsh/Documents/jHipster/node_modules/ts-loader/index.js??ref--4-3!/Users/harsh/Documents/jHipster/node_modules/tslint-loader/index.js!/Users/harsh/Documents/jHipster/src/main/webapp/app/modules/account/settings/settings.tsx","dependencies":[{"path":"/Users/harsh/Documents/jHipster/src/main/webapp/app/modules/account/settings/settings.tsx","mtime":1555084345000},{"path":"/Users/harsh/Documents/jHipster/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/harsh/Documents/jHipster/node_modules/cache-loader/dist/cjs.js","mtime":1555084384000},{"path":"/Users/harsh/Documents/jHipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/harsh/Documents/jHipster/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/harsh/Documents/jHipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\nvar SettingsPage = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsPage, _super);\n    function SettingsPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleValidSubmit = function (event, values) {\n            var account = tslib_1.__assign({}, _this.props.account, values);\n            _this.props.saveAccountSettings(account);\n            event.persist();\n        };\n        return _this;\n    }\n    SettingsPage.prototype.componentDidMount = function () {\n        this.props.getSession();\n    };\n    SettingsPage.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    SettingsPage.prototype.render = function () {\n        var account = this.props.account;\n        return (React.createElement(\"div\", null,\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(\"h2\", { id: \"settings-title\" },\n                        \"User settings for \",\n                        account.login),\n                    React.createElement(AvForm, { id: \"settings-form\", onValidSubmit: this.handleValidSubmit },\n                        React.createElement(AvField, { className: \"form-control\", name: \"firstName\", label: \"First Name\", id: \"firstName\", placeholder: \"Your first name\", validate: {\n                                required: { value: true, errorMessage: 'Your first name is required.' },\n                                minLength: { value: 1, errorMessage: 'Your first name is required to be at least 1 character' },\n                                maxLength: { value: 50, errorMessage: 'Your first name cannot be longer than 50 characters' }\n                            }, value: account.firstName }),\n                        React.createElement(AvField, { className: \"form-control\", name: \"lastName\", label: \"Last Name\", id: \"lastName\", placeholder: \"Your last name\", validate: {\n                                required: { value: true, errorMessage: 'Your last name is required.' },\n                                minLength: { value: 1, errorMessage: 'Your last name is required to be at least 1 character' },\n                                maxLength: { value: 50, errorMessage: 'Your last name cannot be longer than 50 characters' }\n                            }, value: account.lastName }),\n                        React.createElement(AvField, { name: \"email\", label: \"Email\", placeholder: \"Your email\", type: \"email\", validate: {\n                                required: { value: true, errorMessage: 'Your email is required.' },\n                                minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\n                                maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\n                            }, value: account.email }),\n                        React.createElement(Button, { color: \"primary\", type: \"submit\" }, \"Save\"))))));\n    };\n    return SettingsPage;\n}(React.Component));\nexport { SettingsPage };\nvar mapStateToProps = function (_a) {\n    var authentication = _a.authentication;\n    return ({\n        account: authentication.account,\n        isAuthenticated: authentication.isAuthenticated\n    });\n};\nvar mapDispatchToProps = { getSession: getSession, saveAccountSettings: saveAccountSettings, reset: reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n",{"version":3,"file":"/Users/harsh/Documents/jHipster/src/main/webapp/app/modules/account/settings/settings.tsx","sourceRoot":"","sources":["/Users/harsh/Documents/jHipster/node_modules/tslint-loader/index.js!/Users/harsh/Documents/jHipster/src/main/webapp/app/modules/account/settings/settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Col, Alert, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\n\nexport interface IUserSettingsState {\n  account: any;\n}\n\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    const account = {\n      ...this.props.account,\n      ...values\n    };\n\n    this.props.saveAccountSettings(account);\n    event.persist();\n  };\n\n  render() {\n    const { account } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"settings-title\">User settings for {account.login}</h2>\n            <AvForm id=\"settings-form\" onValidSubmit={this.handleValidSubmit}>\n              {/* First name */}\n              <AvField\n                className=\"form-control\"\n                name=\"firstName\"\n                label=\"First Name\"\n                id=\"firstName\"\n                placeholder=\"Your first name\"\n                validate={{\n                  required: { value: true, errorMessage: 'Your first name is required.' },\n                  minLength: { value: 1, errorMessage: 'Your first name is required to be at least 1 character' },\n                  maxLength: { value: 50, errorMessage: 'Your first name cannot be longer than 50 characters' }\n                }}\n                value={account.firstName}\n              />\n              {/* Last name */}\n              <AvField\n                className=\"form-control\"\n                name=\"lastName\"\n                label=\"Last Name\"\n                id=\"lastName\"\n                placeholder=\"Your last name\"\n                validate={{\n                  required: { value: true, errorMessage: 'Your last name is required.' },\n                  minLength: { value: 1, errorMessage: 'Your last name is required to be at least 1 character' },\n                  maxLength: { value: 50, errorMessage: 'Your last name cannot be longer than 50 characters' }\n                }}\n                value={account.lastName}\n              />\n              {/* Email */}\n              <AvField\n                name=\"email\"\n                label=\"Email\"\n                placeholder=\"Your email\"\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: 'Your email is required.' },\n                  minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\n                  maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\n                }}\n                value={account.email}\n              />\n              <Button color=\"primary\" type=\"submit\">\n                Save\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n"]}]}